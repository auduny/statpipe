#!/usr/bin/perl
# Copyright Audun Ytterdal <audun@ytterdal.net>
# Licenced under GPL Version 2.

=head1 NAME

statpipe - swiss knife statistics

=cut

my $version="1.0";

use Getopt::Long;
#use Data::Dumper;
use Time::HiRes qw( time );
use Pod::Usage;
# Unbuffered output
$| = 1;
# Catch Ctrl-C and friends
$SIG{INT} = \&end_pipe;

my $opt_linefreq; # Default none
my $opt_timefreq=5; # Default every 5 second
my $opt_maxtime=60; # Default 60 seconds
my $opt_maxlines=0; # Stop at five million lines 
my $opt_maxkeys=50000;
my $opt_regex = 0;
my $opt_case  = 0;
my $opt_limit = 30;
my $opt_field;
my $opt_delimiter = '\s+'; #Default delimiter is one or more spaces
my $opt_help = 0;
my $opt_version = 0;
my $opt_clear=0; #Don't clean screen
my $opt_hits=1; # show hits per second

my $result = GetOptions(
"t|timefreq=i"  => \$opt_timefreq,   # how often do we update in time
"m|maxtime=i"   => \$opt_maxtime,    # when to stop
"maxlines=i"    => \$opt_maxlines,   # when to stop
"linefreq=i"    => \$opt_linefreq,   # how often do we update in lines
"l|limit=i"     => \$opt_limit,      # how many do we print
"maxkeys=i"     => \$opt_maxkeys,    # maxkeys (default 5000)
"n|not=s"       => \$opt_not,        # Not these
"s|case"        => \$opt_case,       # key sensetive?
"c|clear"       => \$opt_clear,      # clear and updatescreen?
"f|field=s"     => \$opt_field,      # what field to use?
"d|delimiter=s" => \$opt_delimiter,  # What delimiter to use
"h|hits!"       => \$opt_hits,       # show hits/s
"h|help"        => \$opt_help,       # Print help 
"v|version"     => \$opt_version     # Print version
);                                      


=head1 SYNOPSIS

tail -f some.log  | statpipe [options] [regex] ... [regex]

 Options:
  --timefreq|-t     Frequency of output in seconds (5)
  --linefreq        Frequency of output in lines (none)
  --maxtime|-m      Time before closing the pipe in seconds (60)
  --maxlines        Maximum numbers of lines to parse (unlimited)
  --field|f         What field top use as key
  --delimiter|d     What delimiter to use for fields (spaces)
  --limit           Limit output of keys (30)
  --maxkeys         Max number of unique keys (50000)
  --not|n           Exclude lines with regex
  --case|s          Be casesensetive
  --hits            Show hits per second (yes)
  --help            Show help
  --version         Show version

=head1 DESCRIPTION

statpipe is a excellent little tool to analyse logfiles, or any file for that matter, and produce percentage of hits, hits per second and other cool stuff.
It's supposed to be a better way of doin tail -f | awk | cut| unique  |sort |uniqeue | whaterver. Or as a poor mans splunk

=cut


if ($opt_help) {
    pod2usage("statpipe $version by Audun Ytterdal <audun\@ytterdal.net>\n");
    exit(0);
}

if ($opt_version) {
    print "$version\n"; 
    exit(0);
}

# The hash where we store objects
my $objects;

# counters
my $freqcount = 0;
my $starttime = time();
my $freqtime  = $starttime;
my $lines     = 0;
my $keys      = 0;
my $now = time();


while (<STDIN>) {
    $now = time();
    $lines++;
    if ($opt_maxkeys) {
        $keys = keys %$objects;
        if ($keys > $opt_maxkeys) {
            print "Maxkeys ($opt_maxkeys) reached\n";
            &end_pipe;
        }
    }
    if ($opt_maxtime) {
        if ($now - $starttime >= $opt_maxtime) {
            print "Maxtime of $opt_maxtime seconds reached.\n";
            &end_pipe;
        }
    }
    if ($opt_maxlines) {
        if ($lines >= $opt_maxlines) {
            print "Maxlines of $opt_maxlines reached.\n\n";
            &end_pipe;
        }
    }
    my $line = $_;
    chomp $line;            # remove trailing newlines
    if ($opt_not) {
        if ($line =~ m/$opt_not/) {
            next;
        }
    }
    for my $reg (@ARGV) {
        if ($opt_case) {
            if ( $line =~ m/$reg/ ) {
                if ($1) {
                    $objects->{$1}++;    # add match as key
                } else {
                    $objects->{$reg}++;  # add regex as key
                }
            }
        }
        else {
            if ( $line =~ m/$reg/i ) {   # caseinsensetive is default
                if ($1) {
                    $objects->{$1}++;    # add match as key
                } else {
                    $objects->{$reg}++;  # add regexp as key
                }
            }
        }
    }
    if ( !@ARGV ) {    # we didn't send regexp, count every line
        if ($opt_field) {    # which field to use
            my @fields    = split(",",$opt_field);
            my @fieldlist = split(/$opt_delimiter/,$line);
            my $object;
            for my $field (@fields) {
                $object .= "$fieldlist[($field-1)] ";
            }
            chop($object);
            $objects->{$object}++;
        }
        else {
            $objects->{$line}++;
        }
    }
    $freqcount++;
    if ($opt_linefreq) {    # print out every <n> lines
        printout( $objects, $lines, $starttime ) if ( $freqcount >= $opt_linefreq );
        $freqcount = 0;
    }
    if ($opt_timefreq) {    # print out every <n> seconds
        if ( time() - $freqtime >= $opt_timefreq ) {
            printout( $objects, $lines, $starttime );
            $freqtime = time();
        }

    }

}
&end_pipe;                  # we only get here if the pipe is closed.

sub printout {
    my ( $objects, $lines, $starttime ) = @_;
    my $diff   = time() - $starttime;
    my $hitsum = 0;
    my $limit  = 0;
    my $hitlimit;
    my $limitedhits = 0;
    if ($opt_clear) {       # if set, clear screen between prints
        my $clear = `tput clear`;
        print $clear;
    }

    # sort the hash values and print descending
    for my $reg ( sort { $objects->{$b} <=> $objects->{$a} } keys %$objects ) {
        $hitsum += $objects->{$reg};
        if ( !$hitlimit ) {    # only print untill we hit the limit
            if ($opt_hits) {
                printf(
                    "%-25s : (%.1f%%) (%.1f hits/s) (%d hits / %d)\n",
                    $reg,
                    ( $objects->{$reg} / $lines ) * 100,
                    $objects->{$reg} / $diff,
                    $objects->{$reg}, $lines
                );
            }
            else {
                printf(
                    "%-25s : (%.1f%%) (%d hits / %d)\n",
                    $reg, ( $objects->{$reg} / $lines ) * 100,
                    $objects->{$reg}, $lines
                );
            }
        }
        else {
            $limitedhits += $objects->{$reg};
        }
        $limit++;
        if ( $opt_limit && $limit >= $opt_limit ) {
            $hitlimit++;
        }
    }
    if ($hitlimit) {
        if ($opt_hits) {
            printf(
                "%-25s : (%.1f%%) (%.1f hits/s) (%d(%d) hits(uniq) / %d)\n",
                "<limited>",
                ( $limitedhits / $lines ) * 100,
                $limitedhits / $diff,
                $limitedhits, $hitlimit, $lines
            );
        }
        else {
            printf(
                "%-25s : (%.1f%%) (%d(%d) hits(uniq) / %d)\n",
                "<limited>", ( $limitedhits / $lines ) * 100,
                $limitedhits, $hitlimit, $lines
            );
        }
    }
    my $rest = $lines - $hitsum;
    if ($rest) {
        if ($opt_hits) {
            printf(
                "%-25s : (%.1f%%) (%.1f hits/s) (%d hits / %d)\n",
                "<rest>",
                ( $rest / $lines ) * 100,
                $rest / $diff,
                $rest, $lines
            );
        }
        else {
            printf(
                "%-25s : (%.1f%%) (%d hits / %d)\n",
                "<rest>", ( $rest / $lines ) * 100,
                $rest, $lines
            );
        }
    }
    if ($opt_hits) {
        printf(
            "%-25s : (%.1f%%) (%.1f hits/s) (%d hits / %d)\n",
            "<total>",
            100,
            $hitsum / $diff,
            $hitsum, $lines
        );
    }
    else {
        printf(
            "%-25s : (%.1f%%) (%d hits / %d)\n",
            $reg, ( $objects->{$reg} / $lines ) * 100,
            $objects->{$reg}, $lines
        );
    }

    print "\n";
}

sub end_pipe {
    print "\n";
    printout( $objects, $lines, $starttime );
    my $diff = time() - $starttime;
    printf( "Parsed %d lines in %.2f secs (%.1f lines/s)\n",
        $lines, $diff, $lines / $diff );
    exit;
}

=head1 EXAMPLES

=over 4

Show top 30 visited urls. Update it every 5 seconds for 60 seconds (default)
$ tail -f /var/log/httpd/access.log | statpipe -f 7

Seperate fields by " and show field two
$ tail -f /var/log/httpd/access.log | statpipe -d \" -f 2

Group jpeg and jpg differently
$ tail -f /var/log/httpd/access.log | statpipe jpe?g png gif

Group jpeg and jpg into one key
$ tail -f /var/log/httpd/access.log | statpipe (jpe?g) png gif --not gift

List top articles the last 10 seconds
$ tail -f /var/log/httpd/access.log | statpipe 'artid=(\d+)' --maxtime=10 --limit 20 

=back

=HEAD1 TODO

TODO: Merge ($1) ($2) etc.
TODO: Switch to caculate percentage of hits instead of total
TODO: Name change: PMS? (Poor mans Splunk) (Pipe measure system), statpipe


=cut
